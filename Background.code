
	/*----------------------------------------------------
	
		PLC운용 시작 처리부 (항상 필요한 부분)
	
	----------------------------------------------------*/
	read_port();	// 입력버퍼링
//	looptime(0.2); // 0.02초마다 실행
	looptime(1.0);	// 0.5마다 실행
	
	/*----------------------------------------------------

		사용자 프로그램 영역 시작 ~ 
	
	----------------------------------------------------*/
	include("\\BitValue\\Background.code");
	
	/*----------------------------------------------------
	
		시리얼 통신 및 이더넷 통신테스트 예제
	
	----------------------------------------------------*/
	if(0)
	{
		SVAR stateCom(0);
		SVAR ComNo(0);
		
		// 포트열기
		if( stateCom == 0 )
		{
			ComNo = open_com(1, 115200);
			// 아래는 이더넷 통신일 때
			//ComNo = open_com( 10000, "ip=192.168.0.52, port=2000, time=10000, reconnect=0");
			stateCom = 10;
		}
		// 포트 확인
		else if( stateCom == 10 )
		{
			if( ComNo >= 0 )
			{
				stateCom = 20;
			}
			else
			{
				stateCom = 900;
			}
			
			// 연결알림
			{
				VAR msgstr;
				msgstr = sprintf_int("Open Port No= %ld", ComNo);
				messagebox(0,0, msgstr, "");
			}
		}
		// 데이터 스트링 전송
		else if( stateCom == 20 )
		{
			VAR i;
			i=0;
			putch_com(ComNo, '\r');
			putstr_com(ComNo, "Hellow! 0123456789 ");
		
			//messagebox(0,0, "send ethernet!", "...");
			stateCom = 40;
		}
		// 데이터 수신확인
		else if( stateCom == 40 )
		{
			VAR ch;
			
			while( !isempty_com(ComNo) )
			{
				// 수신데이터 메세지출력
				ch = getch_com(ComNo);		
				putch_com(ComNo, ch);

				// 수신데이터 메시지
				{
					VAR mssgch;
					mssgch = sprintf_int("\r\n char=%ld", ch);
					//messagebox(0,0,mssgch, "");
				}
																		
				// 수신데이터의 의한 메뉴처리			
				if( ch == 'x' ) 		{ stateCom = 50; } 			// 통신 종료
				else if( ch == 'r' ) 	{ stateCom = 20; } 			// 스트링 전송으로 전이
				else if( ch == ' ' )	{ messagebox(0,3,"",""); }	// 메시지박스클리어
			}
		}
		// 포트 닫기
		else if( stateCom == 50 )
		{
			// 포트 다음 알림
			{
				messagebox(0,0,"Close Port!",""); 
				close_com(ComNo);
				stateCom = 900;
			}
		}
		// 종료
		else if( stateCom == 900 )
		{			
		}
	}

	/*----------------------------------------------------
	
		ADC 입력을 이용한 속도 오버라이드 테스트 예제
	
	----------------------------------------------------*/
	if(0)
	{
		VAR OVERRIDE, G01FEED, G00FEED, JOGFEED;
		VAR ADC;
		SVAR preADC(0);
		
		ADC = INT( WINC_GET_ADC(1) / 500 );

		// ADC변화될때만 명령을 처리한다. 
		if( preADC != ADC )
		{
			preADC = ADC;
			G01FEED = 200 * ADC / 65535 * 500;
		
			if( G01FEED < 5 ) { G01FEED = 5; }
			WINC_FEED_OVERRIDE(G01FEED);

			//WINC_FEED_OVERRIDE();
			//WINC_G00_OVERRIDE();
			//WINC_SPINDLE_OVERRIDE();
			//WINC_JOG_SPEED();
		}
	}

	/*----------------------------------------------------

	     바이너리 스위치 입력에 의한 스핀들 오버라이딩

   	     입력포트 (1=P0, 2=P1, 4=P2, 8=P3) 으로 지정

	----------------------------------------------------*/
	if(0)
	{
		VAR SpindleOverrideSw;
		VAR SpindleOverride;

		// 입력포트에서 스위치를 입력받는다.
		SpindleOverrideSw = WINC_GET_GIO(0x01);

		// 스위치 입력을 반전시킨다.
		SpindleOverrideSw = (~SpindleOverrideSw) & 0x0f;

		// 스핀들 오버라이딩 비율을 계산한다.
		SpindleOverride = 100 * SpindleOverrideSw / 10;

		// 스핀들 속도를 오버라이딩 한다.
		WINC_SPINDLE_OVERRIDE(SpindleOverride);
	}

	/*----------------------------------------------------
	
		조이스틱 구동 예제
	
		조이스틱 테스트 제품명: 
			- Logitech X3D Extreme TM 3D pro
	
	----------------------------------------------------*/

	// 조이스틱 마스터인에이블에서 허가하고 All Home 동작이 아닐때
	VAR MasterEnable_Joystick1:#30158;
	VAR IsAllHoming:#30190;
	VAR IsAnyHoming:#30195;
	VAR IsActMPGWheel:#30842;
	
	if( MasterEnable_Joystick1 && (!IsAllHoming) && (!IsAnyHoming) && (!IsActMPGWheel) )
	{
		/*
			조이스틱 드라이브를 포함시킨다. 
			이때 call("..."); 함수를 사용해서 결합하지 않습니다.(내부에 정적변수 사용하기때문)
			call() 함수는 독립으로 실행되며 실행 초기에 지역변수와 정적변수 모두를 초기화 하게 됩니다.
			include() 함수로 결합하게 되면 내부에 선언된 변수 모두가 부모코드에서 유효합니다.
			이때 변수중복에 주의하셔야 합니다.
			만약 내부적으로 정적변수를 시스템 메모리로 이용한다면
			call() 함수를 이용해서 호출할 수 있습니다.
		*/

		include("\\DriverCode\\Driver_Joystick1_mode_0.code");
	}

	/*----------------------------------------------------
	
		조그동작 예제
	
	----------------------------------------------------*/
	if(0)
	{
		if(1)
		{
			// 입력포트 정의
			VAR Pin_XDec(2), Pin_XInc(3);
			VAR Pin_YDec(1), Pin_YInc(0);
			VAR Pin_ZDec(6), Pin_ZInc(7);
			
			// 조그입력이 발생하면 MPG를 자동 OFF합니다.
			// X축 JOG 감소이동
			if( nX(Pin_XDec) ) { WINC_PUT_DATA_BOOL(30840, 0); WINC_JOG_MODE(1); WINC_JOG_MOVE(1,-1);	}
			// X축 JOG 증가이동
			if( nX(Pin_XInc) ) { WINC_PUT_DATA_BOOL(30840, 0); WINC_JOG_MODE(1); WINC_JOG_MOVE(1,1);	}
			// X축 JOG 정지
			if( pX(Pin_XDec) ||  pX(Pin_XInc) ) { WINC_PUT_DATA_BOOL(30840, 1); WINC_JOG_MODE(1); WINC_JOG_MOVE(1,0);	}
	
			// Y축 JOG 감소이동
			if( nX(Pin_YDec) ) { WINC_PUT_DATA_BOOL(30840, 0); WINC_JOG_MODE(1); WINC_JOG_MOVE(2,-1);	}
			// Y축 JOG 증가이동
			if( nX(Pin_YInc) ) { WINC_PUT_DATA_BOOL(30840, 0); WINC_JOG_MODE(1); WINC_JOG_MOVE(2,1);	}
			// Y축 JOG 정지
			if( pX(Pin_YDec) || pX(Pin_YInc) ) { WINC_PUT_DATA_BOOL(30840, 1); WINC_JOG_MODE(1); WINC_JOG_MOVE(2,0);	}
		
			// Z축 JOG 감소이동
			if( nX(Pin_ZDec) ) { WINC_PUT_DATA_BOOL(30840, 0); WINC_JOG_MODE(1); WINC_JOG_MOVE(4,-1);	}
			// Y축 JOG 증가이동
			if( nX(Pin_ZInc) ) { WINC_PUT_DATA_BOOL(30840, 0); WINC_JOG_MODE(1); WINC_JOG_MOVE(4,1);	}
			// Y축 JOG 정지
			if( pX(Pin_ZDec) || pX(Pin_ZInc) ) { WINC_PUT_DATA_BOOL(30840, 1); WINC_JOG_MODE(1); WINC_JOG_MOVE(4,0);	}
		}
				
		// ADC 채널3에 2K볼륨으로 조그속도오버라이딩
		if(1)
		{
			VAR JogFeedOverride;
			VAR ADC;
			SVAR preJog_Speed_ADC(0);

			ADC = INT(WINC_GET_ADC(3)/500)*2;
	
			// ADC가 변화될때만 명령을 처리한다. 단 MPG휠 반응없을것
			if( preJog_Speed_ADC != ADC  && !#30842)
			{
				preJog_Speed_ADC = ADC;
				JogFeedOverride= 100 * ADC / 65535 * 500;	
				WINC_JOG_SPEED(JogFeedOverride);
			}
		}
	}
	
	/*----------------------------------------------------
	
		사용하지 않는 축의 리미트, 홈센서 신호를 이용한 
		동작 스위치 입력 예제
	
	----------------------------------------------------*/
	//C축의 홈센서 신호를 시작/정지  스위치로, 리미트를 소프트리셋스위치로 사용하기
 	//(먼저 C축을 모션보드에서 사용하지 않는 축에 할당합니다. 예> 모션보드 S1축에 할당)
	if(0)
	{	
		/*---------------------------------
		
			시작/정지 토글 스위치
			
		---------------------------------*/
		VAR startSwitch;
		SVAR preStartSwitch(0);
	
		// C축 홈스위치 상태를 얻는다.	
		startSwitch = #36153;
		
		// 홈스위치가 눌러지면
		if( startSwitch && !preStartSwitch) 
		{ 	
			VAR OnAuto:#30194;
			VAR OnPause:#30196;
			
			// 현재 시작스위치로 작동할 것인가?
			if( (!OnAuto) || OnPause )
			{
				WINC_START(); 
			}
			// 현재 정지스위치로 작동할 것인가?
			else
			{
				WINC_PAUSE();
			}			
		}
		preStartSwitch = startSwitch;
		
		/*---------------------------------
			
			소프트 리셋 스위치
		
		---------------------------------*/
		VAR resetSwitch;
		SVAR preResetSwitch;

		// C축 리미트상태를 얻는다.
		resetSwitch = #36154;
		
		// 리미트스위치가 눌러지면
		if( resetSwitch && !preResetSwitch ) 
		{ 
			// 소프트 리셋한다.
			WINC_RESET(); 
		}
		preResetSwitch = resetSwitch;
	}
	
	/*----------------------------------------------------
		PLC 입출력 프로그램 예제
		전체적인 상태 흐름 동작이 될 수 있도록 작업을 함.
	----------------------------------------------------*/
	if(1)
	{	
	/*
		SVAR ProcTimeCnt(0); // 지역적 전역변수 선언 및 0 초기화
		
		if( ProcTimeCnt == 0 )
		{
	//		call("Process_1.code"); // 처리 코드 1
		}
		else if( ProcTimeCnt == 1)
		{
	//		call("Process_2.code"); // 처리 코드 2
		}
		else if( ProcTimeCnt == 2 )
		{
	//		call("Process_3.code"); // 처리 코드 3
		}
		else if( ProcTimeCnt == 3 )
		{
			call("BitValue//SelfCheck.code"); // 처리 코드 4
		}
		if( ProcTimeCnt >= 3 ) 
		{ 
			ProcTimeCnt = 0; 
		} // 처리시간분할 카운터 증가
		else 
		{ 
			ProcTimeCnt = ProcTimeCnt + 1; 
		}
	*/		
		//--------------------------------------------------------------------------------------------------------
		//
		// 칼라코드 변수 선언
		//
		//--------------------------------------------------------------------------------------------------------
		VAR WHITE   (0xffffff);
		VAR RED     (0x0000ff);
		VAR GREEN   (0x00ff00);
		VAR BLUE    (0xff0000);
		VAR CYAN    (0xffff00);
		VAR YELLOW  (0x00ffff);
		VAR BLACK   (0x000000);
		VAR GRAY    (0XE0E0E0);
		
		VAR  dlgMssg[10];
		VAR OP_UI;
		VAR count;
		
		//messagebox(0,0," 테스트 1 ","");
		OP_UI = WINC_GET_DATA_INT(38000);
		if(OP_UI == 4)
		{
			VAR temp;
			VAR ReagentTime:#10010;
			
			 temp = WINC_GET_DATA_INT(38085);
			 if( temp == 1 )
			  {
				WINC_ENTER_IMCMD();
				WINC_SET_GIO( 0x01<<4)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );
				
				WINC_ENTER_IMCMD();
				WINC_SET_GIO( 0x01<<6)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );
				
				WINC_ENTER_IMCMD();
				WINC_SET_GIO( 0x01<<7)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );

				WINC_ENTER_IMCMD();
				WINC_SET_GIO( 0x01<<8)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );

				WINC_ENTER_IMCMD();
				WINC_SET_GIO( 0x01<<9)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );

				WINC_ENTER_IMCMD();
				WINC_SET_GIO( 0x01<<14)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime )
			 }
			 else
			 {
				WINC_ENTER_IMCMD();
				WINC_CLR_GIO( 0x01<<14)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );

				WINC_ENTER_IMCMD();
				WINC_CLR_GIO( 0x01<<6)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );
				
				WINC_ENTER_IMCMD();
				WINC_CLR_GIO( 0x01<<7)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );

				WINC_ENTER_IMCMD();
				WINC_CLR_GIO( 0x01<<8)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );

				WINC_ENTER_IMCMD();
				WINC_CLR_GIO( 0x01<<9)
				WINC_LEAVE_IMCMD();

				delay( ReagentTime );

			 }

		}
		
//		if(OP_UI == 2)			
		{
			SVAR ProcTimeCnt(0); // 지역적 전역변수 선언 및 0 초기화
		
			if( ProcTimeCnt == 0 )
			{
		//		call("Process_1.code"); // 처리 코드 1
			}
			else if( ProcTimeCnt == 1)
			{
		//		call("Process_2.code"); // 처리 코드 2
			}
			else if( ProcTimeCnt == 2 )
			{
		//		call("Process_3.code"); // 처리 코드 3
			}
			else if( ProcTimeCnt == 3 )
			{
		//		call("BitValue\\SelfCheck.code"); // 처리 코드 4
			}
			if( ProcTimeCnt >= 3 ) 
			{ 
				ProcTimeCnt = 0; 
			} // 처리시간분할 카운터 증가
			else 
			{ 
				ProcTimeCnt = ProcTimeCnt + 1; 
			}		
			
			if(1)
			{
			
				VAR GOUT;
	
				GOUT = X(0);    // 현재의 상태를 읽어옴 
			
				if( GOUT == 1 )    // 임시 수정 16.01.20
				{
					WINC_PUT_DATA_INT(38010,1);
					WINC_PUT_DATA_STR(38020,"OK");
				}
				else
				{
					WINC_PUT_DATA_INT(38010,0);
					WINC_PUT_DATA_STR(38020,"부족");
				}
				
				GOUT = X(1);    // 현재의 상태를 읽어옴 			
				if( GOUT == 1 )
				{
					WINC_PUT_DATA_INT(38011,1);
					WINC_PUT_DATA_STR(38021,"OK");
				}
				else
				{
					WINC_PUT_DATA_INT(38011,0);
					WINC_PUT_DATA_STR(38021,"부족");
				}
				GOUT = X(2);    // 현재의 상태를 읽어옴 			
				if( GOUT == 1 )
				{
					WINC_PUT_DATA_INT(38012,1);
					WINC_PUT_DATA_STR(38022,"OK");
				}
				else
				{
					WINC_PUT_DATA_INT(38012,0);
					WINC_PUT_DATA_STR(38022,"부족");
				}
				GOUT = X(3);    // 현재의 상태를 읽어옴 			
				if( GOUT == 1 )
				{
					WINC_PUT_DATA_INT(38013,1);
					WINC_PUT_DATA_STR(38023,"OK");
				}
				else
				{
					WINC_PUT_DATA_INT(38013,0);
					WINC_PUT_DATA_STR(38023,"부족");
				}
				GOUT = X(4);    // 현재의 상태를 읽어옴 			
				if( GOUT == 1 )
				{
					WINC_PUT_DATA_INT(38014,1);
					WINC_PUT_DATA_STR(38024,"OK");
				}
				else
				{
					WINC_PUT_DATA_INT(38014,0);
					WINC_PUT_DATA_STR(38024,"FAIL");
				}
				GOUT = X(5);    // 현재의 상태를 읽어옴 			
				if( GOUT == 1 )
				{
					WINC_PUT_DATA_INT(38015,1);
					WINC_PUT_DATA_STR(38025,"CLOSE");
				}
				else
				{
					WINC_PUT_DATA_INT(38015,0);
					WINC_PUT_DATA_STR(38025,"OPEN");
				}
			}		
		}
	}	
//-------------------------------------------
//		시스템 Timer
//-------------------------------------------
if(1)
{
	VAR Timer, Sec, Min, Hour;
	VAR Temp;
	
	Timer = WINC_GET_DATA_REAL(30450);
	Hour = (Timer/3600)-0.5;
	Min = (Timer/60)-0.5;
	Sec = Timer%60;
	
	if(Hour<0)
	{
		WINC_PUT_DATA_REAL(38045,0);
	}
	else
	{
		WINC_PUT_DATA_REAL(38045,Hour);
	}
	if(Min<0)
	{
		WINC_PUT_DATA_REAL(38046,0);
	}
	else
	{
		WINC_PUT_DATA_REAL(38046,Min);
	}
	WINC_PUT_DATA_REAL(38047,Sec);

}

	
//--------------------------------------------------------------
//
//--------------------------------------------------------------	
	if(0)
	{
		VAR ValveDllHandle:#12000;


		/* 
			Valve 이ㅣ 핸들 초기화			
		*/
			if(UINT32(ValveDllHandle) == 0)
			{
				ValveDllHandle	= load_dll("\\DLL\\RS485_RO_32.dll");	
				if(!UINT32(ValveDllHandle))
				{
				//	ValveDllHandle	= load_dll("\\DLL\\RS485_RO_32.dll");	

					messagebox(0,0,"사용자 통신라이브러리가 인스톨되지 않았습니다.!","");
			/*
					exe_dll(0,open_dll,0,0);
					exe_dll(0,Send_dll,1,1);
					//exe_dll(0, "open_dll",0,0);
					exe_dll(0,Send_dll,1,2);
					//exe_dll(0, "open_dll",0,0);
					exe_dll(0,Send_dll,1,3);
			*/
				}
				else
				{
//					ValveDllHandle	= load_dll("\\DLL\\RS485_RO_32.dll");	

					messagebox(0,0,"test 1 ","");
				//	PRINT " OK "
					exe_dll(ValveDllHandle,"open_dll",0,0);
					exe_dll(ValveDllHandle,"Send_dll",1,1);
				//	exe_dll(0,"Send_dll",1,2);
				//	exe_dll(0,"Send_dll",1,3);
				
				//	ValveDllHandle = 1;
				}
		//		ValveDllHandle = 1;
			}
			else
			{

		//		ValveDllHandle = 1;
		//		messagebox(0,0,"test 2 ","");
		//		exe_dll(ValveDllHandle,"open_dll",0,0);
				exe_dll(ValveDllHandle,"Send_dll",1,1);
				exe_dll(ValveDllHandle,"Send_dll",1,2);
				exe_dll(ValveDllHandle,"Send_dll",1,3);

	//			exe_dll(1,"Send_dll",1,1);

			//	PRINT ValveDllHandle;

			}
		
	
	}

	/*----------------------------------------------------
	
		 ~ 사용자 프로그램 영역 종료
	
	----------------------------------------------------*/


	/*----------------------------------------------------
	
		PLC운영 종료처리부 (항상 필요한 부분)
	
	----------------------------------------------------*/
	run_M(); 		// M메모리 운영
	run_T(); 		// PLC타이머 운영	
	write_port();	// 출력버퍼링

	return (0);
	
